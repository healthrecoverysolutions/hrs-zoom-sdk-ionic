{"version":3,"sources":["/Users/anubhavsaxena/Documents/Impetus_Projects/Angular_Monorepo_GitLab_Copy/angular-monorepo/node_modules/@hrsui/angular/node_modules/@hrsui/core/dist/esm/hrs-input.entry.js"],"names":[],"mappings":"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C,+BAA+B,2BAA2B,+BAA+B,qCAAqC,0BAA0B,wBAAwB,qBAAqB,uBAAuB,qBAAqB,uBAAuB,yBAAyB,yBAAyB,yBAAyB,gCAAgC,6BAA6B,8BAA8B,kFAAkF,gDAAgD,oFAAoF,wCAAwC,0OAA0O,gCAAgC;;AAE39X;AACA;AACA,IAAI,4DAAgB;AACpB,0BAA0B,4DAAW;AACrC,oBAAoB,4DAAW;AAC/B,qBAAqB,4DAAW;AAChC,mBAAmB,4DAAW;AAC9B,oBAAoB,4DAAW;AAC/B,oBAAoB,4DAAW;AAC/B,oBAAoB,4DAAW;AAC/B,gCAAgqBAAqB,8DAAa;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iFAAiF;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,8DAA0B;AAChC;AACA,gCAAgC,4DAA4D;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8FAA8F;AACxH;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gEAAU;AAClC,WAAW,kLAAkL;AAC7L;AACA;AACA,kBAAkB,8DAAa;AAC/B;AACA;AACA;AACA,YAAY,4DAAC,CAAC,oDAAI,GAAG;AACrB;AACA;AACA;AACA,OAAO,6BAA6B,EAAE,4DAAC,WAAW,wiBAAwiB,2DAA2D,4DAAC,YAAY,yLAAyL,GAAG,gBAAgB,EAAE,4DAAC,cAAc,kCAAkC,GAAG,kBAAkB;AACt7B;AACA,YAAY,QAAQ,4DAAU,OAAO;AACrC,yBAAyB;AACzB;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAE8B;;AAE9B,2C","file":"56-es5.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-be85d80d.js';\nimport { d as debounceEvent, b as applyRequiredInputElements, f as findItemLabel } from './helpers-0e8d6178.js';\nimport { g as getHrsMode } from './ui-config-8be75a31.js';\n\nconst inputNewDesignCss = \"@font-face{font-display:swap;font-family:\\\"Roboto\\\";font-style:normal;font-weight:400;src:url(\\\"../fonts/Roboto/light.woff\\\") format(\\\"woff\\\")}@font-face{font-display:swap;font-family:\\\"Roboto\\\";font-style:normal;font-weight:500;src:url(\\\"../fonts/Roboto/regular.woff\\\") format(\\\"woff\\\")}@font-face{font-display:swap;font-family:\\\"Roboto\\\";font-style:normal;font-weight:700;src:url(\\\"../fonts/Roboto/bold.woff\\\") format(\\\"woff\\\")}.sc-hrs-input-newDesign:root{--shadow-sm:0 3px 6px 0 rgba(var(--color-shadow), .3);--shadow-md:0 3px 12px 0 rgba(var(--color-shadow), .6);--shadow-lg:0 3px 18px 0 rgba(var(--color-shadow), .6);--shadow-header:0 0 8px -5px rgba(var(--color-shadow), .6);--shadow-footer:-1px 0 12px -3px rgba(var(--color-shadow), .6);--shadow-inset-input:inset 0 1px 2px rgba(0, 0, 0, .39), 0 -1px 1px var(--white), 0 1px 0 var(--white);--shadow-focus-outline:0 0 0 4px var(--color-outline);--shadow-focus-invalid:0 0 1px 2px var(--color-error);--shadow-hover-tab:0 4px 0 0 var(--gray-8);--shadow-selected-tab:0 4px 0 0 var(--color-primary-dark)}.sc-hrs-input-newDesign-h{font-family:var(--font)}html.sc-hrs-input-newDesign{line-height:1.15;text-size-adjust:100%}body.sc-hrs-input-newDesign{margin:0}main.sc-hrs-input-newDesign{display:block}h1.sc-hrs-input-newDesign{margin:0.67em 0;font-size:2em}hr.sc-hrs-input-newDesign{overflow:visible;height:0;box-sizing:content-box}pre.sc-hrs-input-newDesign{font-family:monospace, monospace;font-size:1em}a.sc-hrs-input-newDesign{background-color:transparent}abbr[title].sc-hrs-input-newDesign{border-bottom:none;text-decoration:underline}b.sc-hrs-input-newDesign,strong.sc-hrs-input-newDesign{font-weight:bolder}code.sc-hrs-input-newDesign,kbd.sc-hrs-input-newDesign,samp.sc-hrs-input-newDesign{font-family:monospace, monospace;font-size:1em}small.sc-hrs-input-newDesign{font-size:80%}img.sc-hrs-input-newDesign{border-style:none}button.sc-hrs-input-newDesign,input.sc-hrs-input-newDesign,optgroup.sc-hrs-input-newDesign,select.sc-hrs-input-newDesign,textarea.sc-hrs-input-newDesign{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button.sc-hrs-input-newDesign,input.sc-hrs-input-newDesign{overflow:visible}button.sc-hrs-input-newDesign,select.sc-hrs-input-newDesign{text-transform:none}button.sc-hrs-input-newDesign,[type=button].sc-hrs-input-newDesign,[type=reset].sc-hrs-input-newDesign,[type=submit].sc-hrs-input-newDesign{appearance:button}button.sc-hrs-input-newDesign::-moz-focus-inner,[type=button].sc-hrs-input-newDesign::-moz-focus-inner,[type=reset].sc-hrs-input-newDesign::-moz-focus-inner,[type=submit].sc-hrs-input-newDesign::-moz-focus-inner{border-style:none;padding:0}button.sc-hrs-input-newDesign:-moz-focusring,[type=button].sc-hrs-input-newDesign:-moz-focusring,[type=reset].sc-hrs-input-newDesign:-moz-focusring,[type=submit].sc-hrs-input-newDesign:-moz-focusring{outline:1px dotted ButtonText}fieldset.sc-hrs-input-newDesign{padding:0.35em 0.75em 0.625em}legend.sc-hrs-input-newDesign{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress.sc-hrs-input-newDesign{vertical-align:baseline}textarea.sc-hrs-input-newDesign{overflow:auto}[type=checkbox].sc-hrs-input-newDesign,[type=radio].sc-hrs-input-newDesign{box-sizing:border-box;padding:0}[type=number].sc-hrs-input-newDesign::-webkit-inner-spin-button,[type=number].sc-hrs-input-newDesign::-webkit-outer-spin-button{height:auto}[type=search].sc-hrs-input-newDesign{appearance:textfield;outline-offset:-2px}[type=search].sc-hrs-input-newDesign::-webkit-search-decoration{appearance:none}.sc-hrs-input-newDesign::-webkit-file-upload-button{appearance:button;font:inherit}details.sc-hrs-input-newDesign{display:block}summary.sc-hrs-input-newDesign{display:list-item}template.sc-hrs-input-newDesign{display:none}[hidden].sc-hrs-input-newDesign{display:none}.sronly.sc-hrs-input-newDesign{border:0;clip:rect(0, 0, 0, 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.sc-hrs-input-newDesign-h{--color-primary:#0073af;--color-primary-dark:#00538d;--color-primary-light:#0197d6;--color-primary-50:rgba(0, 115, 175, .5);--color-primary-30:rgba(0, 115, 175, .3);--color-accent:#721c7e;--color-accent-dark:#56156f;--color-accent-light:#92278f;--white:#fff;--white-90:rgba(255, 255, 255, .9);--white-80:rgba(255, 255, 255, .8);--white-70:rgba(255, 255, 255, .7);--white-60:rgba(255, 255, 255, .6);--white-50:rgba(255, 255, 255, .5);--white-40:rgba(255, 255, 255, .4);--white-30:rgba(255, 255, 255, .3);--white-20:rgba(255, 255, 255, .2);--white-10:rgba(255, 255, 255, .1);--white-05:rgba(255, 255, 255, .05);--gray-1:#fcfcfc;--gray-2:#f5f5f5;--gray-3:#eee;--gray-4:#e0e0e0;--gray-5:#bdbdbd;--gray-6:#9e9e9e;--gray-7:#757575;--gray-8:#616161;--gray-9:#424242;--gray-10:#323232;--black:#212121;--color-sub-light:var(--gray-3);--color-sub-dark:var(--gray-7);--color-success:#0a853b;--color-info:#115ffb;--color-warning:#eb7100;--color-error:#ab1300;--color-risk-none:#5a7c79;--color-risk-low:#0ea84b;--color-risk-medium:var(--color-warning);--color-risk-high:#c62360;--color-notifications:#df1642;--color-congratulations:#ebb700;--color-great-job:#0ea84b;--color-focused-state:#56156f;--color-focused-state-bg:rgba(86, 21, 111, .6);--gradient-color-stop-1:var(--white);--gradient-color-stop-2:var(--color-primary-dark);--gradient-background:linear-gradient(180deg, var(--gradient-color-stop-1) 0%, var(--gradient-color-stop-2) 100%);--sidebar-gradient:linear-gradient(0deg, var(--color-primary-dark), var(--color-primary), var(--white));--color-shadow:0, 0, 0,;--color-backdrop:0, 0, 0, .4}.sc-hrs-input-newDesign-h{--font:\\\"Open Sans\\\", sans-serif;--font-weight-bold:700;--font-weight-semibold:600;--font-weight-regular:400}@media screen and (max-width: 599px){.sc-hrs-input-newDesign-h{--font-size-h1:1.25rem;--font-size-h2:1rem;--font-size-h3:.75rem;--font-size-b1:1rem;--font-size-b2:.875rem;--font-size-button:1rem;--line-height-h1:1.75rem;--line-height-h2:1.25rem;--line-height-h3:1rem;--line-height-b1:1.25rem;--line-height-b2:1.25rem;--line-height-button:1.25rem}}@media screen and (min-width: 600px){.sc-hrs-input-newDesign-h{--font-size-h1:1.75rem;--font-size-h2:1.25rem;--font-size-h3:1rem;--font-size-b1:1.25rem;--font-size-b2:1rem;--font-size-button:1.5rem;--line-height-h1:2.25rem;--line-height-h2:1.75rem;--line-height-h3:1.25rem;--line-height-b1:1.75rem;--line-height-b2:1.25rem;--line-height-button:1.75rem}}.sc-hrs-input-newDesign-h{--box-shadow-01:0 2px 6px rgba(var(--color-shadow) .2);--box-shadow-02:0 -2px 6px rgba(var(--color-shadow) .2);--box-shadow-03:0 4px 5px rgba(var(--color-shadow) .14), 0 1px 10px rgba(var(--color-shadow) .12), 0 2px 4px rgba(var(--color-shadow) .2);--box-shadow-04:5px 0 6px rgba(var(--color-shadow) .14);--box-shadow-05:0 4px 12px rgba(var(--color-shadow) .2);--box-shadow-06:inset 0 4px 4px rgba(var(--color-shadow) .25);--box-shadow-focus:0 0 0 4px var(--color-focused-state-bg)}.sc-hrs-input-newDesign-h{position:relative;z-index:0;display:flex;align-items:center;flex:1;height:var(--input-height);width:var(--input-width);padding:var(--input-padding);border:var(--input-border);border-radius:var(--input-border-radius);background:var(--background);color:var(--color);box-shadow:var(--box-shadow)}hrs-form-item.sc-hrs-input-newDesign-h:not(.item-label),hrs-form-item:not(.item-label) .sc-hrs-input-newDesign-h{--padding-start:0}.native-input.sc-hrs-input-newDesign{display:inline-block;flex:1;box-sizing:border-box;height:100%;max-height:100%;width:var(--input-max-width);max-width:var(--input-max-width);border-radius:var(--input-border-radius);border:0;appearance:none;background:transparent;color:var(--color);padding:var(--native-input-padding);text-indent:var(--text-indent);text-transform:var(--text-transform);outline:none;box-shadow:none}.native-input.sc-hrs-input-newDesign::placeholder{color:var(--placeholder-color);font-family:inherit;font-size:var(--placeholder-font-size);font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity);text-indent:var(--text-indent)}.native-input.sc-hrs-input-newDesign:-webkit-autofill{background-color:transparent}.native-input.sc-hrs-input-newDesign::-ms-clear{display:none}.native-input[disabled].sc-hrs-input-newDesign{opacity:0.5}button.input--clear.sc-hrs-input-newDesign{display:var(--clear-btn-display);align-items:var(--clear-btn-flex-alignment);justify-content:var(--clear-btn-flex-justification);width:var(--clear-btn-size);height:var(--clear-btn-size);border-radius:var(--clear-btn-border-radius);border:var(--clear-btn-border);padding:var(--clear-btn-padding);margin-left:auto;appearance:none;background:transparent;cursor:pointer;visibility:hidden}button.input--clear.sc-hrs-input-newDesign:focus{outline:none;box-shadow:var(--clear-btn-focus-box-shadow)}button.input--clear.sc-hrs-input-newDesign:focus-visible{outline:none}button.input--clear.sc-hrs-input-newDesign hrs-icon.sc-hrs-input-newDesign{--icon-color:var(--close-icon-color);--icon-size:var(--close-icon-size)}.has-value.sc-hrs-input-newDesign-h button.input--clear.sc-hrs-input-newDesign{visibility:visible}.has-focus.sc-hrs-input-newDesign-h{position:relative;border:var(--focus-border);border-radius:var(--focus-border-radius);pointer-events:var(--focus-pointer-events);outline:none;box-shadow:var(--focus-box-shadow)}.is-invalid.sc-hrs-input-newDesign-h,.is-invalid.has-focus.sc-hrs-input-newDesign-h{border:var(--invalid-border)}label.sc-hrs-input-newDesign{margin-top:var(--label-margin-top);margin-left:var(--label-margin-left);margin-bottom:var(--label-margin-bottom);margin-right:var(--label-margin-right)}.sc-hrs-input-newDesign-h{--padding-bottom:.375rem;--padding-end:.375rem;--padding-start:.75rem;--padding-top:.375rem;--input-height:2.25rem;--input-width:100%;--input-min-width:4rem;--input-max-width:80%;--input-padding:var(--padding-top) var(--padding-end) var(--padding-bottom) var(--padding-start);--input-border-color:var(--color-sub-dark);--input-border-width:1px;--input-border:var(--input-border-width) solid var(--input-border-color);--input-border-radius:.5rem;--native-input-padding:0;--background:transparent;--box-shadow:none;--color:var(--black);--placeholder-color:initial;--placeholder-font-size:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--text-transform:uppercase;--text-indent:.3rem;--close-icon-size:1rem;--close-icon-color:var(--color-primary-light);--clear-btn-display:flex;--clear-btn-flex-alignment:center;--clear-btn-flex-justification:center;--clear-btn-size:1.5rem;--clear-btn-padding:0;--clear-btn-border-radius:.25rem;--clear-btn-border-width:1px;--clear-btn-border-color:var(--color-focused-state);--clear-btn-border:none;--clear-btn-focus-box-shadow:0 0 0 var(--clear-btn-border-width) var(--clear-btn-border-color);--focus-border:var(--input-border);--focus-shadow-spread:.125rem;--focus-box-shadow:0 0 0 var(--focus-shadow-spread) var(--color-focused-state-bg);--focus-border-radius:var(--input-border-radius);--focus-pointer-events:auto;--invalid-border:var(--input-border);--invalid-box-shadow:var(--focus-box-shadow);--font-weight:var(--font-weight-regular);--font-size:var(--font-size-b1);--line-height:var(--line-height-b1);font-weight:var(--font-weight);font-size:var(--font-size);line-height:var(--line-height)}@media screen and (min-width: 600px){.sc-hrs-input-newDesign-h{--padding-bottom:.25rem;--padding-end:.25rem;--padding-start:.75rem;--padding-top:.25rem;--input-height:3.75rem;--input-border-width:2px;--close-icon-size:1.6rem;--clear-btn-size:2.25rem;--clear-btn-border-radius:.5rem;--clear-btn-border-width:2px;--focus-shadow-spread:.25rem}}.has-value.sc-hrs-input-newDesign-h,.has-value.has-focus.sc-hrs-input-newDesign-h{--input-border-color:var(--color-primary-light)}.is-invalid.sc-hrs-input-newDesign-h,.is-invalid.has-focus.sc-hrs-input-newDesign-h{--input-border-color:var(--color-error)}.is-invalid.sc-hrs-input-newDesign-h button.input--clear.sc-hrs-input-newDesign hrs-icon.sc-hrs-input-newDesign,.is-invalid.has-focus.sc-hrs-input-newDesign-h button.input--clear.sc-hrs-input-newDesign hrs-icon.sc-hrs-input-newDesign{--icon-color:var(--color-error)}\";\n\nconst Input = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.hrsShowMessage = createEvent(this, \"hrsShowMessage\", 7);\n    this.hrsInput = createEvent(this, \"hrsInput\", 7);\n    this.hrsChange = createEvent(this, \"hrsChange\", 7);\n    this.hrsBlur = createEvent(this, \"hrsBlur\", 7);\n    this.hrsFocus = createEvent(this, \"hrsFocus\", 7);\n    this.hrsStyle = createEvent(this, \"hrsStyle\", 7);\n    this.hrsValid = createEvent(this, \"hrsValid\", 7);\n    this.inputId = `hrs-input-${inputIds++}`;\n    this.didBlurAfterEdit = false;\n    this.hasFocus = false;\n    this.isValid = true;\n    /**\n     * If `on` user input will be autocapitalized\n     */\n    this.autocapitalize = 'off';\n    /**\n     * If `on` user will be presented with autocomplete options\n     */\n    this.autocomplete = 'off';\n    /**\n     * If `on` autocorrection will be applied to user input\n     */\n    this.autocorrect = 'off';\n    /**\n     * If `true` input will be given focus on render\n     */\n    this.autofocus = false;\n    /**\n     * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n     */\n    this.clearInput = true;\n    /**\n     * Debounce rate for detecting user input changes\n     */\n    this.debounce = 0;\n    /**\n     * If `true` input element will be disabled and appropriate style will be applied\n     */\n    this.disabled = false;\n    /**\n     * Style class to apply to the infoMessage\n     * @default 'error-message'\n     */\n    this.messageClass = 'error-message';\n    /**\n     * The name attribute of the input, associated with labels\n     */\n    // eslint-disable-next-line no-invalid-this\n    this.name = this.inputId;\n    /**\n     * If `true` user input is required\n     */\n    this.required = false;\n    /**\n     * If `true`, the user cannot modify the value.\n     */\n    this.readonly = false;\n    /**\n     * If `true` user has interacted with input\n     */\n    this.touched = false;\n    /**\n     * Standard input types:\n     * 'date' | 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url' | 'time' | 'week' | 'month' | 'datetime-local'\n     */\n    this.type = 'text';\n    /**\n     * Input value, changes with user input\n     */\n    this.value = '';\n    this.onInput = (ev) => {\n      const input = ev.target;\n      if (input) {\n        this.value = input.value || '';\n      }\n      this.hrsInput.emit(ev);\n    };\n    this.onBlur = () => {\n      this.hasFocus = false;\n      this.focusChanged();\n      this.emitStyle();\n      this.hrsBlur.emit();\n    };\n    this.onFocus = () => {\n      if (!this.touched)\n        this.touched = true;\n      this.hasFocus = true;\n      this.focusChanged();\n      this.emitStyle();\n      this.hrsFocus.emit();\n    };\n    this.onKeydown = (ev) => {\n      if (this.shouldClearOnEdit()) {\n        // Did the input value change after it was blurred and edited?\n        // Do not clear if user is hitting Enter to submit form\n        if (this.didBlurAfterEdit && this.hasValue() && ev.key !== 'Enter') {\n          // Clear the input\n          this.clearTextInput();\n        }\n        // Reset the flag\n        this.didBlurAfterEdit = false;\n      }\n    };\n    this.clearTextOnEnter = (ev) => {\n      if (ev.key === 'Enter') {\n        this.clearTextInput(ev);\n      }\n    };\n    this.clearTextInput = (ev) => {\n      if (this.clearInput && !this.readonly && !this.disabled && ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        // Try to focus input again after pressing clear button\n        this.setFocus();\n      }\n      if (this.value && this.value !== '') {\n        this.value = '';\n      }\n      /**\n       * This is needed for clearOnEdit\n       * Otherwise the value will not be cleared\n       * if user is inside the input\n       */\n      if (this.nativeInput) {\n        this.nativeInput.value = '';\n      }\n    };\n  }\n  debounceChanged() {\n    this.hrsChange = debounceEvent(this.hrsChange, this.debounce);\n  }\n  disabledChanged() {\n    this.emitStyle();\n  }\n  valueChanged() {\n    this.emitStyle();\n    // @ts-ignore\n    this.hrsChange.emit({ value: (this.value === null ? this.value : this.value.toString()), el: this.el });\n  }\n  componentWillLoad() {\n    // tabindex attr is passed to native-input and removed from\n    // hrs-input so it won't tab twice\n    if (this.el.hasAttribute('tabindex')) {\n      const tabindex = this.el.getAttribute('tabindex');\n      this.tabindex = tabindex !== null ? tabindex : undefined;\n      this.el.removeAttribute('tabindex');\n    }\n    // If this element is required, signal associated `label`, `form-item`, and other elements to update\n    if (this.required)\n      applyRequiredInputElements(this.el);\n    if (this.infoMessage)\n      this.hrsShowMessage.emit({ isValid: true, message: this.infoMessage, target: this.el });\n  }\n  connectedCallback() {\n    this.emitStyle();\n    this.debounceChanged();\n    {\n      document.dispatchEvent(new CustomEvent('hrsInputDidLoad', {\n        detail: this.el\n      }));\n    }\n  }\n  disconnectedCallback() {\n    {\n      document.dispatchEvent(new CustomEvent('hrsInputDidUnload', {\n        detail: this.el\n      }));\n    }\n  }\n  /**\n   * Set focus on specified `hrs-input`. Use this instead of global `input.focus()`\n   */\n  async setFocus() {\n    if (this.nativeInput)\n      this.nativeInput.focus();\n  }\n  /**\n   * Sets blur on the native `input` in `hrs-input`. Use this instead of global `input.blur()`\n   * @internal\n   */\n  async setBlur() {\n    if (this.nativeInput)\n      this.nativeInput.blur();\n  }\n  /**\n   * Returns the native `<input>` element used under the hood\n   */\n  getInputElement() {\n    return Promise.resolve(this.nativeInput);\n  }\n  /**\n   * Manually assign validation status to `hrs-input`\n   * @param isValid\n   */\n  async setIsValid(isValid) {\n    this.isValid = isValid;\n  }\n  shouldClearOnEdit() {\n    const { type, clearOnEdit } = this;\n    return clearOnEdit === undefined ? type === 'password' : clearOnEdit;\n  }\n  getValue() {\n    return typeof this.value === 'number' ? this.value.toString() : (this.value || '').toString();\n  }\n  emitStyle() {\n    this.hrsStyle.emit({\n      'interactive': true,\n      'input': true,\n      'has-placeholder': this.placeholder != null,\n      'has-value': this.hasValue(),\n      'has-focus': this.hasFocus,\n      'interactive-disabled': this.disabled,\n    });\n  }\n  focusChanged() {\n    if (this.required) {\n      if (!this.hasFocus && !this.hasValue()) {\n        this.isValid = false;\n      }\n      else if (!this.hasFocus && this.hasValue()) {\n        this.isValid = true;\n      }\n      this.hrsValid.emit({ isValid: this.isValid, message: this.infoMessage, class: this.messageClass, target: this.el });\n    }\n  }\n  hasValue() {\n    return this.getValue().length > 0;\n  }\n  render() {\n    const contextMode = getHrsMode();\n    const { autocapitalize, autocomplete, autocorrect, autofocus, disabled, min, max, minlength, maxlength, name, pattern, placeholder, qa, required, readonly, size, step, tabindex, type, } = this;\n    const value = this.getValue();\n    const labelId = this.inputId + '-lbl';\n    const label = findItemLabel(this.el);\n    if (label) {\n      label.id = labelId;\n    }\n    return (h(Host, { mode: contextMode, \"aria-disabled\": this.disabled ? 'true' : null, class: {\n        'has-value': this.hasValue(),\n        'has-focus': this.hasFocus,\n        'is-invalid': !this.isValid\n      }, \"data-qa\": qa ? qa : null }, h(\"input\", { class: \"native-input\", ref: (input) => this.nativeInput = input, \"aria-labelledby\": labelId, disabled: disabled, autoCapitalize: autocapitalize, autoComplete: autocomplete, autoCorrect: autocorrect, autoFocus: autofocus, min: min, max: max, minLength: minlength, maxLength: maxlength, name: name, pattern: pattern, placeholder: placeholder || '', required: required, readonly: readonly, size: size, step: step, tabindex: tabindex, type: type, value: value, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeydown }), this.clearInput && !this.readonly && !this.disabled && (h(\"button\", { class: 'input--clear', \"aria-label\": 'reset', type: 'button', onTouchStart: this.clearTextInput, onMouseDown: this.clearTextInput, onKeyDown: this.clearTextOnEnter, \"data-qa\": qa ? `${qa}--btn` : 'btn' }, h(\"hrs-icon\", { icon: \"delete-pcmt\", qa: qa ? `${qa}--icon` : 'icon' })))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"debounce\": [\"debounceChanged\"],\n    \"disabled\": [\"disabledChanged\"],\n    \"value\": [\"valueChanged\"]\n  }; }\n};\nlet inputIds = 0;\nInput.style = {\n  newDesign: inputNewDesignCss\n};\n\nexport { Input as hrs_input };\n\n//# sourceMappingURL=hrs-input.entry.js.map"],"sourceRoot":""}