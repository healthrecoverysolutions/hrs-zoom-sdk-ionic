{"version":3,"sources":["./src/app/add-patient/add-patient.page.html","./src/app/add-patient/add-patient.module.ts","./src/app/add-patient/add-patient.page.scss","./src/app/add-patient/add-patient.page.ts","./src/app/add-patient/form-label-strings.enum.ts","./src/app/add-patient/form-validation-strings.enum.ts","./src/app/add-patient/new-patient.model.ts","./src/common/directives/selectbox.directive.ts"],"names":[],"mappings":"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","file":"add-patient-add-patient-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n    <ion-toolbar class=\\\"c_app_header is-modal\\\">\\n        <ion-buttons class=\\\"c_app_header--buttons\\\" slot=\\\"start\\\">\\n            <ion-button class=\\\"c_app_header--btn\\\" (click)=\\\"confirmExit()\\\">\\n                <ion-icon class=\\\"c_app_header--icon-back\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-title class=\\\"c_app_header--title\\\">\\n            <span class=\\\"c_app_header--text\\\">\\n                {{ 'ADD_PATIENT.TITLE' | translate }}\\n            </span>\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content scroll=\\\"false\\\">\\n    <ion-card class=\\\"c_card c_add_patient--card_wrapper\\\">\\n        <ion-card-header class=\\\"c_card--header\\\">\\n            <ion-label>\\n                <span>Step {{currentPage}} of {{lastPage}}</span>\\n                <br>\\n                <span *ngIf=\\\"currentPage === 1\\\">{{ 'ADD_PATIENT.STEP.ONE' | translate }}</span>\\n                <span *ngIf=\\\"currentPage === 2\\\">{{ 'ADD_PATIENT.STEP.TWO' | translate }}</span>\\n                <span *ngIf=\\\"currentPage === 3 && hasCustomFields\\\">{{ 'ADD_PATIENT.STEP.CUSTOM' | translate }}</span>\\n                <span *ngIf=\\\"currentPage === 3 && !hasCustomFields || currentPage === 4\\\">{{ 'ADD_PATIENT.STEP.REVIEW' | translate }}</span>\\n            </ion-label>\\n        </ion-card-header>\\n        <ion-card-content class=\\\"c_card--content\\\">\\n            <form [formGroup]=\\\"addPatientForm\\\" class=\\\"c_form\\\">\\n                <div *ngIf=\\\"currentPage === 1 || currentPage === 2\\\">\\n                    <div *ngFor=\\\"let key of addPatientFormKeys; let i = index\\\">\\n                        <ion-item class=\\\"c_form--field-group\\\">\\n                            <!-- field label -->\\n                            <ion-label\\n                                *ngIf=\\\"key != 'subgroup'\\\"\\n                                position=\\\"stacked\\\"\\n                                class=\\\"c_form--label {{ (key != 'middle' && key != 'gender' && key != 'subgroup') ? 'c_form--label-required' : '' }}\\\"\\n                                >{{ addPatientFormStrings[key] | translate }}</ion-label>\\n\\n                            <ion-input\\n                                *ngIf=\\\"key === 'first' || key === 'middle' || key === 'last' || key === 'phone' || key === 'pid'\\\"\\n                                position=\\\"stacked\\\"\\n                                class=\\\"c_form--field c_form--field-basic\\\"\\n                                type=\\\"{{ (key === 'phone') ? 'tel' : 'text' }}\\\"\\n                                enterkeyhint=\\\"next\\\"\\n                                autocapitalize=\\\"{{(key === 'pid' || key === 'phone') ? 'off' : 'on'}}\\\"\\n                                autocomplete=\\\"off\\\"\\n                                placeholder=\\\"{{ ((key === 'phone') ? 'ADD_PATIENT.PLACEHOLDER.PHONE' : ((key === 'pid') ? 'ADD_PATIENT.PLACEHOLDER.PATIENTID' : addPatientFormStrings[key])) | translate }}\\\"\\n                                formControlName=\\\"{{ key }}\\\"\\n                                [class.invalid]=\\\"(form[key].touched || form[key].dirty) && form[key].errors\\\"\\n                            ></ion-input>\\n                            <ion-datetime\\n                                *ngIf=\\\"key === 'dob'\\\"\\n                                position=\\\"stacked\\\"\\n                                class=\\\"c_form--field c_form--field-date\\\"\\n                                placeholder=\\\"mm/dd/yyyy\\\"\\n                                formControlName=\\\"dob\\\"\\n                                max=\\\"{{ currentDate }}\\\"\\n                                display-format=\\\"MM/DD/YYYY\\\"\\n                                picker-format=\\\"MM DD YYYY\\\"\\n                                [class.invalid]=\\\"(form[key].touched || form[key].dirty) && form[key].errors\\\"\\n                            ></ion-datetime>\\n                            <ion-select\\n                                addShadowPartsToSelectBox\\n                                id=\\\"select_gender\\\"\\n                                *ngIf=\\\"key === 'gender'\\\"\\n                                placeholder=\\\"{{ 'ADD_PATIENT.PLACEHOLDER.GENDER' | translate }}\\\"\\n                                position=\\\"stacked\\\"\\n                                class=\\\"c_form--field c_form--field-select\\\"\\n                                formControlName=\\\"gender\\\"\\n                                cancelText=\\\"{{'ADD_PATIENT.CANCEL' | translate}}\\\"\\n                                okText=\\\"{{'ADD_PATIENT.OK' | translate}}\\\"\\n                                (ionCancel)=\\\"handleInputCancel('gender')\\\"\\n                                [class.invalid]=\\\"(form[key].touched || form[key].dirty) && form[key].errors\\\">\\n                                <ion-select-option value=\\\" \\\">{{ 'ADD_PATIENT.NONE' | translate }}</ion-select-option>\\n                                <ion-select-option value=\\\"F\\\">{{ 'GENDER.FEMALE' | translate }}</ion-select-option>\\n                                <ion-select-option value=\\\"M\\\">{{ 'GENDER.MALE' | translate }}</ion-select-option>\\n                                <ion-select-option value=\\\"X\\\">{{ 'GENDER.UNKNOWN' | translate }}</ion-select-option>\\n                                <ion-select-option value=\\\"U\\\">{{ 'GENDER.OTHER' | translate }}</ion-select-option>\\n                            </ion-select>\\n\\n                            <!--\\n                                subgroups (2 scenarios)\\n                                1 - \\\"oneSubgroup\\\" a single subgroup is assigned to the clinician: the patient automatically is assigned the clinician's subgroup - the field is basically read-only\\n                                2 - \\\"selectSubgroup\\\" is when no subgroup is assigned and the clinician has effectively access to ALL subgroups: -optional- clincian can pick from all subgroups in the environment\\n                            -->\\n                            <ng-template [ngIf]=\\\"key === 'subgroup'\\\">\\n                                <div [ngSwitch]=\\\"subgroupSelectionStrategy\\\" class=\\\"c_add_patient--subgroup_wrapper\\\">\\n\\n                                    <!-- Scenario 1: Subgroup defaults to the clinician's only subgroup -->\\n                                    <div *ngSwitchCase=\\\"'subgroupAutoAssigned'\\\" class=\\\"c_form--static_group\\\">\\n                                        <p class=\\\"c_form--static_label\\\">{{ addPatientFormStrings[key] | translate }}</p>\\n                                        <p class=\\\"c_form--static_value\\\">{{ getClinicianSubgroup()[0] }}</p>\\n                                    </div>\\n\\n                                    <ion-label\\n                                        *ngIf=\\\"subgroupSelectionStrategy == 'selectSubgroup'\\\"\\n                                        position=\\\"stacked\\\"\\n                                        class=\\\"c_form--label\\\"\\n                                        [ngClass]=\\\"{'c_form--label-required' : subgroupRequired}\\\"\\n                                    >{{ addPatientFormStrings[key] | translate }}</ion-label>\\n\\n                                    <!-- Scenario 2: Show all the available subgroups  -->\\n                                    <ion-select\\n                                        *ngSwitchCase=\\\"'selectSubgroup'\\\"\\n                                        addShadowPartsToSelectBox\\n                                        class=\\\"c_form--field c_form--field-select c_add_patient--select_box\\\"\\n                                        position=\\\"stacked\\\"\\n                                        formControlName=\\\"subgroup\\\"\\n                                        placeholder=\\\"{{ 'ADD_PATIENT.PLACEHOLDER.SUBGROUP' | translate }}\\\"\\n                                        cancelText=\\\"{{'ADD_PATIENT.CANCEL' | translate}}\\\"\\n                                        okText=\\\"{{'ADD_PATIENT.OK' | translate}}\\\"\\n                                        (ionCancel)=\\\"handleInputCancel('subgroup')\\\"\\n                                        [class.invalid]=\\\"(form[key].touched || form[key].dirty) && form[key].errors\\\">\\n                                        <ion-select-option *ngIf=\\\"!subgroupRequired\\\" value=\\\"{{ 'ADD_PATIENT.NONE' | translate }}\\\">{{ 'ADD_PATIENT.NONE' | translate }}</ion-select-option>\\n                                        <ion-select-option *ngFor=\\\"let subgroup of subgroups\\\" value=\\\"{{ subgroup }}\\\">{{ subgroup }}</ion-select-option>\\n                                    </ion-select>\\n                                </div>\\n                            </ng-template>\\n\\n                            <p *ngIf=\\\"(form[key].value === '') ? ((form[key].touched || form[key].dirty) && form[key].errors) : form[key].errors\\\" class=\\\"c_form--error-msg\\\">\\n                                <span *ngFor=\\\"let error of getErrors(key)\\\">{{ validationMessages[key][error] }}</span>\\n                            </p>\\n                        </ion-item>\\n                    </div>\\n                </div>\\n                <!-- Custom Fields Step -->\\n                <div *ngIf=\\\"currentPage === 3 && hasCustomFields\\\">\\n                    <div *ngFor=\\\"let field of newPatient[customAttributeSetting]; let i = index\\\">\\n                        <ion-item class=\\\"c_form--field-group\\\">\\n                            <ion-label\\n                                class=\\\"c_form--label {{ (field.required) ? 'c_form--label-required' : ''}}\\\"\\n                                position=\\\"stacked\\\"\\n                                >{{ field.name }}</ion-label>\\n                            <ion-input\\n                                class=\\\"c_form--field\\\"\\n                                *ngIf=\\\"field.type === 'text'\\\"\\n                                placeholder=\\\"{{ field.name }}\\\"\\n                                autocapitalize=\\\"none\\\"\\n                                formControlName=\\\"{{ 'custom_' + i }}\\\"\\n                                [class.invalid]=\\\"(form['custom_' + i].touched || form['custom_' + i].dirty) && form['custom_' + i].errors\\\"\\n                            ></ion-input>\\n                            <ion-select\\n                                addShadowPartsToSelectBox\\n                                class=\\\"c_form--field c_form--field-select\\\"\\n                                *ngIf=\\\"field.type === 'boolean'\\\"\\n                                position=\\\"stacked\\\"\\n                                placeholder=\\\"{{ field.name }}\\\"\\n                                formControlName=\\\"{{ 'custom_' + i }}\\\"\\n                                cancelText=\\\"{{'ADD_PATIENT.CANCEL' | translate}}\\\"\\n                                okText=\\\"{{'ADD_PATIENT.OK' | translate}}\\\"\\n                                (ionCancel)=\\\"handleInputCancel('custom_' + i)\\\"\\n                                [class.invalid]=\\\"(form['custom_' + i].touched || form['custom_' + i].dirty) && form['custom_' + i].errors\\\">\\n                                <ion-select-option value=\\\"true\\\">{{ 'USER_INPUT.YES' | translate }}</ion-select-option>\\n                                <ion-select-option value=\\\"false\\\">{{ 'USER_INPUT.NO' | translate }}</ion-select-option>\\n                            </ion-select>\\n                            <p *ngIf=\\\"(form['custom_' + i].value === '') ?\\n                                ((form['custom_' + i].touched || form['custom_' + i].dirty) && form['custom_' + i].errors) :\\n                                form['custom_' + i].errors\\\" class=\\\"c_form--error-msg\\\">{{ 'ADD_PATIENT.VALIDATION.REQUIRED' | translate }}</p>\\n                        </ion-item>\\n                    </div>\\n                </div>\\n                <!-- Review Step -->\\n                <div *ngIf=\\\"currentPage === 3 && !hasCustomFields || currentPage === 4\\\">\\n                    <ion-list\\n                        class=\\\"c_form--review\\\"\\n                        inset=\\\"true\\\"\\n                        lines=\\\"full\\\"\\n                    >\\n                        <ion-item class=\\\"c_form--review-item\\\">\\n                            <ion-label class=\\\"c_form--review-label\\\">{{ 'NAME' | translate}}</ion-label>\\n                            <ion-text class=\\\"c_form--review-value\\\">{{newPatient.name.first}} {{newPatient.name.middle}} {{newPatient.name.last}}</ion-text>\\n                        </ion-item>\\n                        <ion-item class=\\\"c_form--review-item\\\">\\n                            <ion-label class=\\\"c_form--review-label\\\">{{ 'ADD_PATIENT.LABEL.DOB' | translate}}</ion-label>\\n                            <ion-text class=\\\"c_form--review-value\\\">{{newPatient.dob | date:'MM/dd/yyyy'}}</ion-text>\\n                        </ion-item>\\n                        <ion-item class=\\\"c_form--review-item\\\">\\n                            <ion-label class=\\\"c_form--review-label\\\">{{ 'ADD_PATIENT.LABEL.GENDER' | translate}}</ion-label>\\n                            <ion-text class=\\\"c_form--review-value\\\">{{ ( newPatient.gender === ' ' ? 'ADD_PATIENT.NONE' : newPatient.gender ) | translate}}</ion-text>\\n                        </ion-item>\\n                        <ion-item class=\\\"c_form--review-item\\\">\\n                            <ion-label class=\\\"c_form--review-label\\\">{{ 'ADD_PATIENT.LABEL.PHONE'| translate}}</ion-label>\\n                            <ion-text class=\\\"c_form--review-value\\\">{{newPatient.phone}}</ion-text>\\n                        </ion-item>\\n                        <ion-item class=\\\"c_form--review-item\\\">\\n                            <ion-label class=\\\"c_form--review-label\\\">{{ 'ADD_PATIENT.LABEL.PATIENTID' | translate}}</ion-label>\\n                            <ion-text class=\\\"c_form--review-value\\\">{{newPatient.pid}}</ion-text>\\n                        </ion-item>\\n                        <ion-item class=\\\"c_form--review-item\\\" *ngIf=\\\"hasSubgroup\\\">\\n                            <ion-label class=\\\"c_form--review-label\\\">{{ 'ADD_PATIENT.LABEL.SUBGROUP' | translate}}</ion-label>\\n                            <ion-text class=\\\"c_form--review-value\\\">{{ ( newPatient.subgroup === ' ' ? 'ADD_PATIENT.NONE' : newPatient.subgroup ) | translate}}</ion-text>\\n                        </ion-item>\\n                        <!-- custom fields (if any) -->\\n                        <ng-template [ngIf]=\\\"hasCustomFields\\\">\\n                            <ion-item class=\\\"c_form--review-item\\\" *ngFor=\\\"let field of newPatient[customAttributeSetting]\\\">\\n                                <ion-label class=\\\"c_form--review-label\\\">{{field.name}}</ion-label>\\n                                <ion-text class=\\\"c_form--review-value\\\">\\n                                    {{getCustomFieldValue(field.value, field.type)}}\\n                                </ion-text>\\n                            </ion-item>\\n                        </ng-template>\\n\\n                    </ion-list>\\n\\n                </div>\\n            </form>\\n        </ion-card-content>\\n        <ion-buttons class=\\\"c_card--buttons\\\">\\n            <button ion-button class=\\\"c_card--button-left\\\" *ngIf=\\\"(currentPage > 1)\\\" (click)=\\\"handleBackClick()\\\">{{ 'ADD_PATIENT.BACK' | translate }}</button>\\n            <button ion-button class=\\\"c_card--button button-disabled c_add_patient--forward_btn\\\" [disabled]=\\\"addPatientForm.invalid || loading\\\" (click)=\\\"handleForwardClick()\\\">\\n                <span *ngIf=\\\"!loading && (currentPage < lastPage)\\\" class=\\\"c_add_patient--forward_text\\\">{{ 'ADD_PATIENT.NEXT' | translate }}</span>\\n                <span *ngIf=\\\"!loading && (currentPage === lastPage)\\\" class=\\\"c_add_patient--forward_text\\\">{{ 'ADD_PATIENT.SUBMIT' | translate }}</span>\\n                <span *ngIf=\\\"loading\\\"><ion-spinner></ion-spinner></span>\\n            </button>\\n        </ion-buttons>\\n    </ion-card>\\n</ion-content>\\n\"","import {NgModule, CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IonicModule} from '@ionic/angular';\nimport {RouterModule} from '@angular/router';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {AddPatientPage} from './add-patient.page';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {PipesModule} from '../../pipes/pipes.module';\nimport {AddShadowPartsToSelectBox} from 'src/common/directives/selectbox.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        IonicModule,\n        RouterModule.forChild([\n            {\n                path: '',\n                component: AddPatientPage\n            }\n        ]),\n        TranslateModule.forChild(),\n        ReactiveFormsModule,\n        PipesModule\n    ],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA],\n    declarations: [AddPatientPage, AddShadowPartsToSelectBox]\n})\nexport class AddPatientPageModule {}\n","module.exports = \".c_add_patient--card_wrapper {\\n  min-height: 32.5rem; }\\n  @media (min-height: 1024px) {\\n    .c_add_patient--card_wrapper {\\n      min-height: 50rem; } }\\n  @media (min-height: 1366px) {\\n    .c_add_patient--card_wrapper {\\n      min-height: 65rem; } }\\n  .c_add_patient--card_wrapper .c_card--content {\\n    margin: 30px 0 0 0; }\\n  .c_add_patient--subgroup_wrapper {\\n  width: 100%; }\\n  .c_add_patient--subgroup_wrapper .c_form--static_group {\\n    display: block; }\\n  .c_add_patient--subgroup_wrapper .c_form--static_group .c_form--static_label {\\n      color: var(--color-primary-dark); }\\n  .c_add_patient--subgroup_wrapper .c_form--static_group .c_form--static_value {\\n      text-align: center; }\\n  .c_add_patient--select_box {\\n  width: 100%;\\n  min-width: 100%; }\\n  .c_add_patient--forward_btn {\\n  white-space: nowrap;\\n  min-width: -moz-fit-content;\\n  min-width: fit-content; }\\n  .c_add_patient--forward_btn .c_add_patient--forward_text {\\n    padding: 5px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbnViaGF2c2F4ZW5hL0RvY3VtZW50cy9JbXBldHVzX1Byb2plY3RzL0FuZ3VsYXJfTW9ub3JlcG9fR2l0TGFiX0NvcHkvYW5ndWxhci1tb25vcmVwby9hcHBzL21vYmlsZS1jbGluaWNpYW4vc3JjL2FwcC9hZGQtcGF0aWVudC9hZGQtcGF0aWVudC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0E7RUFDSSxtQkFBbUIsRUFBQTtFQUVuQjtJQUhKO01BSVEsaUJBQWlCLEVBQUEsRUFTeEI7RUFORztJQVBKO01BUVEsaUJBQWlCLEVBQUEsRUFLeEI7RUFiRDtJQVdRLGtCQUFrQixFQUFBO0VBRzFCO0VBQ0ksV0FBVyxFQUFBO0VBRGY7SUFJUSxjQUFjLEVBQUE7RUFKdEI7TUFNZ0MsZ0NBQWdDLEVBQUE7RUFOaEU7TUFPZ0Msa0JBQWtCLEVBQUE7RUFHbEQ7RUFDSSxXQUFXO0VBQ1gsZUFBZSxFQUFBO0VBR25CO0VBQ0ksbUJBQW1CO0VBQ25CLDJCQUFzQjtFQUF0QixzQkFBc0IsRUFBQTtFQUYxQjtJQUtRLFlBQVksRUFBQSIsImZpbGUiOiJzcmMvYXBwL2FkZC1wYXRpZW50L2FkZC1wYXRpZW50LnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBpbXBvcnQgXCIuLi8uLi90aGVtZS92YXJpYWJsZXNcIjtcbi8vIENDTSdzIGFkZCBwYXRpZW50IG1vZGFsLXNwZWNpZmljIHN0eWxlc1xuLy8gTW9zdCBzdHlsZXMgYXJlIGluIHRoZSBwYXR0ZXJuLWxpYnJhcnkncyBjX2NhcmQuc2NzcyBhbmQgY19mb3JtLnNjc3Ncbi5jX2FkZF9wYXRpZW50LS1jYXJkX3dyYXBwZXIge1xuICAgIG1pbi1oZWlnaHQ6IDMyLjVyZW07IC8vIDUyMHB4IGtlZXBzIHRoZSBQUkVWL05FWFQgYnV0dG9ucyBhdCB0aGUgc2FtZSBoZWlnaHQgdGhyb3VnaCBlYWNoIHN0ZXBcbiAgICAvLyBmb3Igc21hbGxlciB0YWJsZXRzXG4gICAgQG1lZGlhIChtaW4taGVpZ2h0OiAxMDI0cHgpIHtcbiAgICAgICAgbWluLWhlaWdodDogNTByZW07XG4gICAgfVxuICAgIC8vIGxhcmdlciB0YWJsZXRzXG4gICAgQG1lZGlhIChtaW4taGVpZ2h0OiAxMzY2cHgpIHtcbiAgICAgICAgbWluLWhlaWdodDogNjVyZW07XG4gICAgfVxuICAgIC5jX2NhcmQtLWNvbnRlbnQge1xuICAgICAgICBtYXJnaW46IDMwcHggMCAwIDA7XG4gICAgfVxufVxuLmNfYWRkX3BhdGllbnQtLXN1Ymdyb3VwX3dyYXBwZXIge1xuICAgIHdpZHRoOiAxMDAlO1xuXG4gICAgLmNfZm9ybS0tc3RhdGljX2dyb3VwIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG5cbiAgICAgICAgLmNfZm9ybS0tc3RhdGljX2xhYmVsIHsgY29sb3I6IHZhcigtLWNvbG9yLXByaW1hcnktZGFyayk7IH1cbiAgICAgICAgLmNfZm9ybS0tc3RhdGljX3ZhbHVlIHsgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gICAgfVxufVxuLmNfYWRkX3BhdGllbnQtLXNlbGVjdF9ib3gge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1pbi13aWR0aDogMTAwJTtcbn1cblxuLmNfYWRkX3BhdGllbnQtLWZvcndhcmRfYnRuIHtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIG1pbi13aWR0aDogZml0LWNvbnRlbnQ7XG5cbiAgICAuY19hZGRfcGF0aWVudC0tZm9yd2FyZF90ZXh0IHtcbiAgICAgICAgcGFkZGluZzogNXB4O1xuICAgIH1cbn1cbiJdfQ== */\"","import {Component, ViewChild} from '@angular/core';\nimport {TranslateService} from '@ngx-translate/core';\nimport {ActivatedRoute, NavigationExtras} from '@angular/router';\nimport {Environment, PatientProfileService} from '../services/providers';\nimport {User} from '../services/user/user';\nimport {NavController, ToastController, MenuController, IonContent, AlertController} from '@ionic/angular';\nimport {NGXLogger} from 'ngx-logger';\nimport {FormControl, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {NewPatient} from './new-patient.model';\nimport * as moment from 'moment';\nimport {CustomFieldInterface} from './custom-field.interface';\nimport {FormLabelStrings} from './form-label-strings.enum';\nimport {FormValidationStrings} from './form-validation-strings.enum';\nimport {PatientSettingsResponse} from '../../common/models/patient-settings-response';\nimport {Settings} from '../services/settings/settings';\n\n@Component({\n    selector: 'page-add-patient',\n    templateUrl: 'add-patient.page.html',\n    styleUrls: ['add-patient.page.scss'],\n    providers: [NGXLogger]\n})\nexport class AddPatientPage {\n    public addPatientForm: FormGroup;\n    public newPatient: NewPatient = new NewPatient();\n    // list of form input keys\n    public addPatientFormKeys: string[];\n    // text strings for translation (label text)\n    public addPatientFormStrings = FormLabelStrings;\n    // messages to show on input error\n    public validationMessages: {[key: string]: {[key: string]: string}};\n    public loading: boolean = false;\n    public hasSubgroup: boolean = false;\n    public subgroups: string[];\n    public subgroupRequired: boolean;\n    public subgroupSelectionStrategy: string;\n    public currentPage: number = 1;\n    public lastPage: number = 3;\n    public currentDate = moment().format('YYYY-MM-DD');\n    public hasCustomFields: boolean = false;\n    public customAttributeSetting: string = Environment.SETTING_PATIENT_CUSTOMATTRIBUTES;\n    private formErrorToast: any;\n\n    @ViewChild(IonContent, {static: false}) content: IonContent;\n\n    constructor(\n        private alertCtrl: AlertController,\n        private route: ActivatedRoute,\n        private navCtrl: NavController,\n        private user: User,\n        private environment: Environment,\n        private settings: Settings,\n        private toastCtrl: ToastController,\n        private menuCtrl: MenuController,\n        private translateService: TranslateService,\n        private patientProfileService: PatientProfileService,\n        private logger: NGXLogger\n    ) {\n        this.initializeFirstPage();\n        this.validationMessages = {\n            first: {\n                required: this.translateService.instant(FormValidationStrings.first)\n            },\n            last: {\n                required: this.translateService.instant(FormValidationStrings.last)\n            },\n            dob: {\n                required: this.translateService.instant(FormValidationStrings.dob)\n            },\n            phone: {\n                minlength: this.translateService.instant(FormValidationStrings.phone)\n            },\n            pid: {\n                required: this.translateService.instant(FormValidationStrings.pid)\n            }\n        };\n    }\n\n    ionViewWillEnter() {\n        this.menuCtrl.enable(false);\n\n        this.hasSubgroup = this.environment.hasSetting(Environment.SETTING_ENV_SUBGROUPS);\n        if (this.hasSubgroup) this.configureSubgroupBehavior();\n\n        this.hasCustomFields = this.environment.hasSetting(this.customAttributeSetting);\n        if (this.hasCustomFields) {\n            this.getCustomFields();\n        }\n    }\n\n    callScrollFunction(): void {\n        if (this.content) {\n            this.content.scrollToTop(0);\n        }\n    }\n\n    /**\n     * For Envs with subgroups enabled\n     * Users that belong to a single subgroup will have patients auto assigned to that subgroup\n     * Users that belong to more than one subgroup are REQUIRED to assign the patient to one of their subgroups\n     * Users that DO NOT belong to any subgroup can treat patient subgroup assignment as OPTIONAL\n     * @private\n     */\n    private configureSubgroupBehavior(): void {\n        this.subgroups = this.environment.getSubgroups();\n\n        if (this.subgroups.length > 1) {\n            // Case *insensitive sorting method (as opposed to .sort())\n            this.subgroups.sort(function(a, b) {\n                a = a.toLowerCase();\n                b = b.toLowerCase();\n                if (a == b) return 0;\n                if (a > b) return 1;\n                return -1;\n            });\n        }\n\n        let userSubgroups = this.getClinicianSubgroup();\n\n        // subgroup assignment is required for User that belong to more than one subgroups\n        this.subgroupRequired = userSubgroups.length > 1;\n        if (this.subgroupRequired) this.validationMessages['subgroup'] = {required: this.translateService.instant(FormValidationStrings.subgroup)};\n\n        // Users that belong to subgroups can only show subgroups they belong to.\n        // Users without subgroups can access all subgroups in the Env\n        if (userSubgroups.length) this.subgroups = this.subgroups.filter((subgroup) => userSubgroups.includes(subgroup));\n\n        // the selection strategy determines if the patient is auto assigned to a subgroup\n        // or if the subgroup selection dropdown will be presented to the User\n        this.subgroupSelectionStrategy = this.determineSubgroupSelectionStrategy();\n    }\n\n    private getCustomFields(): void {\n        if (!this.newPatient[this.customAttributeSetting]) {\n            let allCustomFields = this.environment.getCustomFields();\n            if (allCustomFields) {\n                this.newPatient[this.customAttributeSetting] = [];\n                for (let i = 0; i < allCustomFields.length; i++) {\n                    let customField = allCustomFields[i];\n                    if (customField.patientsetup) {\n                        this.newPatient[this.customAttributeSetting].push({...customField});\n                    }\n                }\n                // make another page for custom Fields form section\n                if (this.newPatient[this.customAttributeSetting] && this.newPatient[this.customAttributeSetting].length > 0) {\n                    this.lastPage = 4;\n                } else {\n                    this.hasCustomFields = false;\n                }\n            }\n        }\n    }\n\n    public handleBackClick() {\n        switch (this.currentPage) {\n            case 2:\n                // We're on the second page, go back to the first page\n                this.initializeFirstPage(true);\n                break;\n            case 3:\n                // Either we're on the custom fields page (step 3 of 4) or the review page (step 3 of 3), regardless going back to the second step\n                this.initializeSecondPage(true);\n                break;\n            case 4:\n                // we're on the review page and...\n                if (this.hasCustomFields) {\n                    // if step 4 of 4, go to the custom fields page\n                    this.initializeCustomFieldsPage(true);\n                } else {\n                    // if step 3 of 3, then go back to the second page\n                    this.initializeSecondPage(true);\n                }\n                break;\n        }\n        this.currentPage--;\n    }\n\n    public handleForwardClick() {\n        switch (this.currentPage) {\n            case 1:\n                this.initializeSecondPage();\n                this.currentPage++;\n                break;\n            case 2:\n                if (this.lastPage === 3) {\n                    this.initializeReviewPage();\n                } else {\n                    this.initializeCustomFieldsPage();\n                }\n                this.currentPage++;\n                break;\n            case 3:\n                // we're either on the custom fields step (step 3 of 4) or the review step (step 3 of 3)\n                if (this.lastPage === 3) {\n                    // if only 3 steps, we must be on the review page (step 3 of 3), so call submit\n                    this.submit();\n                } else {\n                    // there are 4 pages and we are only on step 3, therefore go to the review page\n                    this.initializeReviewPage();\n                    this.currentPage++;\n                }\n                break;\n            case 4:\n                // we're on the review page (step 4 of 4), therefore call submit\n                this.submit();\n                break;\n        }\n    }\n\n    public handleInputCancel(input) {\n        if (input === 'subgroup') {\n            this.addPatientForm.get(input).setValue(this.translateService.instant('ADD_PATIENT.NONE'));\n        } else {\n            this.addPatientForm.get(input).setValue(null);\n        }\n    }\n\n    public initializeFirstPage(isBack?: boolean): void {\n        // cancel any previous toast instances\n        if (this.formErrorToast) {\n            this.formErrorToast.dismissAll();\n        }\n\n        if (isBack) {\n            this.saveSecondPage();\n        }\n\n        this.addPatientForm = new FormGroup({\n            first: new FormControl(this.newPatient.name.first || '', Validators.required),\n            middle: new FormControl(this.newPatient.name.middle || ''),\n            last: new FormControl(this.newPatient.name.last || '', Validators.required),\n            dob: new FormControl(this.newPatient.dob || '', Validators.required),\n        });\n\n        this.addPatientFormKeys = Object.keys(this.form);\n    }\n\n    public initializeSecondPage(isBack?: boolean): void {\n        // cancel any previous toast instances\n        if (this.formErrorToast) {\n            this.formErrorToast.dismissAll();\n        }\n\n        if (isBack) {\n            this.saveCustomFieldsPage();\n        } else {\n            this.saveFirstPage();\n        }\n\n        let controls = {\n            gender: new FormControl(this.newPatient.gender || ''),\n            phone: new FormControl(this.newPatient.phone || '', Validators.minLength(10)),\n            pid: new FormControl(this.newPatient.pid || '', Validators.required),\n        };\n\n        if (this.hasSubgroup) {\n            let subgroupValue = this.newPatient.subgroup || this.translateService.instant('ADD_PATIENT.NONE');\n\n            let subgroupControl = this.subgroupRequired ? new FormControl(this.newPatient.subgroup || '', Validators.required) : new FormControl(subgroupValue, );\n\n            controls['subgroup'] = subgroupControl;\n        }\n\n        this.addPatientForm = new FormGroup(controls);\n        this.addPatientFormKeys = Object.keys(this.form);\n    }\n\n    public initializeCustomFieldsPage(isBack?: boolean): void {\n        // cancel any previous toast instances\n        if (this.formErrorToast) {\n            this.formErrorToast.dismissAll();\n        }\n        if (isBack) {\n            // we're on the review page, going back to custom fields, therefore nothing to save.\n        } else {\n            // we're on the second page, save the second page\n            this.saveSecondPage();\n        }\n        let controls = {};\n        this.newPatient[this.customAttributeSetting].forEach((field, i) => {\n            if (field.required) {\n                controls['custom_' + i] =\n                    new FormControl(this.newPatient[this.customAttributeSetting][i].value || '', Validators.required);\n            } else {\n                controls['custom_' + i] =\n                    new FormControl(this.newPatient[this.customAttributeSetting][i].value || '');\n            }\n        });\n\n        this.addPatientForm = new FormGroup(controls);\n        this.addPatientFormKeys = Object.keys(this.form);\n        this.callScrollFunction();\n    }\n\n    public initializeReviewPage(): void {\n        // cancel any previous toast instances\n        if (this.formErrorToast) {\n            this.formErrorToast.dismissAll();\n        }\n        if (this.hasCustomFields) {\n            // we're on the custom fields page, save the custom fields page\n            this.saveCustomFieldsPage();\n        } else {\n            // we're on the second page, save the second page\n            this.saveSecondPage();\n        }\n        this.callScrollFunction();\n    }\n\n    private saveFirstPage() {\n        this.newPatient.name.first = this.form['first'].value;\n        this.newPatient.name.middle = this.form['middle'].value;\n        this.newPatient.name.last = this.form['last'].value;\n        this.newPatient.dob = this.form['dob'].value;\n    }\n\n    private saveSecondPage() {\n        this.newPatient.gender = this.form['gender'].value;\n        this.newPatient.phone = this.form['phone'].value;\n        this.newPatient.pid = this.form['pid'].value;\n\n        // save the subgroup\n        if (this.hasSubgroup && this.subgroups.length > 0) {\n            if (this.subgroupSelectionStrategy === 'subgroupAutoAssigned') {\n                // if the clinician is assigned to ONLY 1 subgroup, there isn't a form field, therefore assign the patient the same subgroup as the clinician\n                this.newPatient['subgroup'] = this.getClinicianSubgroup()[0];\n            } else {\n                // else, grab the subgroup from the form UNLESS the subgroup is --NONE-- then make the value equal to an empty string.\n                this.newPatient['subgroup'] = this.form['subgroup'].value === this.translateService.instant('ADD_PATIENT.NONE') ? ' ' : this.form['subgroup'].value;\n            }\n        }\n    }\n\n    private saveCustomFieldsPage() {\n        if (this.hasCustomFields) {\n            this.newPatient[this.customAttributeSetting].forEach((field, i) => {\n                field.value = this.form['custom_' + i].value;\n            });\n        }\n    }\n    // yes/no custom fields are saved as true/false instead of yes/no\n    // this converts true/false to yes/no on the final review step\n    public getCustomFieldValue(customFieldValue, customFieldType): string {\n        if (customFieldType === 'boolean') {\n            if (customFieldValue === 'true') {\n                return 'Yes';\n            } else {\n                return 'No';\n            }\n        }\n        return customFieldValue;\n    }\n\n    /**\n     * Returns FormController.\n     */\n    get form(): ReactiveFormsModule {\n        return this.addPatientForm.controls;\n    }\n\n    public getErrors(key): string[] {\n        return Object.keys(this.form[key].errors);\n    }\n\n    /**\n     * Take in FormGroup values and make 'Add Patient' request.\n     */\n    public submit(): void {\n        this.loading = true;\n\n        // cancel any previous toast instances\n        if (this.formErrorToast) {\n            this.formErrorToast.dismissAll();\n        }\n\n        this.createRequestBody();\n\n        if (!this.newPatient.name.first || !this.newPatient.name.last || !this.newPatient.dob || !this.newPatient.pid) {\n            this.loading = false;\n            this.throwErrorAndResetPage();\n        } else {\n            this.patientProfileService.addPatient(this.newPatient).subscribe(\n                {\n                    next: (res) => {\n                        if (res && res.hrsid) {\n                            if (this.newPatient.subgroup) {\n                                this.addSubgroup(res.hrsid, this.newPatient.subgroup);\n                            }\n                            // pop 'Add Patient' page before sending user to patient's profile so they do not click back to the form\n                            // this.navCtrl.pop();\n                            // pop isn't a part of ionic 4, so we are navigating forward on submit along with the data\n                            let navigationExtras: NavigationExtras = {\n                                queryParams: {\n                                    patient: {hrsid: res.hrsid}\n                                }\n                            };\n                            this.navCtrl.navigateForward('/patient-profile', navigationExtras);\n                            this.loading = false;\n                            this.throwSuccessToast();\n                        } else {\n                            this.throwErrorAndResetPage();\n                        }\n                    },\n                    error: (err) => {\n                        this.logger.error(err);\n                        this.throwErrorAndResetPage(err.error.message);\n                    }\n                }\n            );\n        }\n    }\n\n    async throwSuccessToast() {\n        let successToast = await this.toastCtrl.create({\n            header: this.translateService.instant('ADD_PATIENT.SUCCESS_HEADER'),\n            message: this.translateService.instant('ADD_PATIENT.SUCCESS_MESSAGE'),\n            cssClass: 'toast-success',\n            duration: 3000, // success is quicker than error and warning\n            position: 'top'\n        });\n        return await successToast.present();\n    }\n\n    private createRequestBody(): void {\n        if (this.hasCustomFields) {\n            this.saveCustomFieldsPage();\n        } else {\n            this.saveSecondPage();\n        }\n        if (this.newPatient.dob) {\n            this.newPatient.dob = moment(this.newPatient.dob, 'YYYY-MM-DD').format('MM/DD/YYYY');\n        }\n    }\n\n    async throwErrorAndResetPage(message?: string) {\n        message = message ? ': ' + message : '.';\n        let errorMessage = await this.toastCtrl.create({\n            header: this.translateService.instant('ADD_PATIENT.ERROR_HEADER'),\n            message: this.translateService.instant('ADD_PATIENT.ERROR_MESSAGE') + message,\n            cssClass: 'toast-fail',\n            duration: 5000, // allow more time to read error message vs success message\n            position: 'top'\n        });\n        return await errorMessage.present();\n        this.navCtrl.navigateForward('/add-patient');\n    }\n\n    public getClinicianSubgroup(): string[] {\n        if (this.settings && this.settings.settings && this.settings.settings.userData) {\n            return this.settings.settings.userData.subgroup;\n        }\n        return [];\n    }\n\n    public determineSubgroupSelectionStrategy(): string | null {\n        // used to determine how to display the subgroup select box\n        let settings = this.settings.settings;\n\n        if (settings && settings.userData && this.hasSubgroup) {\n            if (settings.userData.subgroup.length === 1) {\n                // IF User belongs to one subgroup patient is auto-assigned to that subgroup\n                // subgroup field is grayed out\n                return 'subgroupAutoAssigned';\n            } else if (settings.userData.subgroup.length !== 1) {\n                // IF User has no subgroup assigned or user belongs to more than one subgroup the subgroup select will be displayed\n                // For Users with no subgroup then the subgroup is OPTIONAL\n                // For Users with subgroups assigned subgroup selection is REQUIRED\n                return 'selectSubgroup';\n            }\n        }\n\n        // If Env is not subgroup enabled or none have been created\n        return null;\n    }\n\n    private addSubgroup(hrsid: string, subgroup: string): void {\n        const saveSubgroupRequest = {subgroup: subgroup} as PatientSettingsResponse;\n        this.patientProfileService.savePatientSettings(hrsid, saveSubgroupRequest).subscribe(\n            {\n                next: () => {\n                    this.logger.log('Successfully set subgroup for new patient');\n                },\n                error: () => {\n                    this.errorToastMessage();\n                }\n            }\n        );\n    }\n\n    async errorToastMessage() {\n        let toast = await this.toastCtrl.create({\n            header: this.translateService.instant('ADD_PATIENT.WARNING.SUBGROUP_HEADER'),\n            message: this.translateService.instant('ADD_PATIENT.WARNING.SUBGROUP_MESSAGE'),\n            cssClass: 'toast-warning',\n            duration: 5000, // allow more time to read warning message vs success message\n            position: 'top'\n        });\n        return await toast.present();\n    }\n\n    public async confirmExit(): Promise<void> {\n        let alert = await this.alertCtrl.create({\n            header: this.translateService.instant('ADD_PATIENT.ALERT-HEADER'),\n            message: this.translateService.instant('ADD_PATIENT.ALERT-MESSAGE'),\n            buttons: [\n                {\n                    text: this.translateService.instant('ADD_PATIENT.ALERT-EXIT'),\n                    handler: () => this.dismiss()\n                },\n                {\n                    text: this.translateService.instant('ADD_PATIENT.ALERT-CONTINUE'),\n                    handler: () => this.alertCtrl.dismiss()\n                }\n            ]\n        });\n\n        return alert.present();\n    }\n\n    public dismiss(): void {\n        this.navCtrl.navigateBack('/patient-list');\n    }\n}\n","export enum FormLabelStrings {\n    first = 'ADD_PATIENT.LABEL.FIRST',\n    middle = 'ADD_PATIENT.LABEL.MIDDLE',\n    last = 'ADD_PATIENT.LABEL.LAST',\n    dob = 'ADD_PATIENT.LABEL.DOB',\n    gender = 'ADD_PATIENT.LABEL.GENDER',\n    phone = 'ADD_PATIENT.LABEL.PHONE',\n    pid = 'ADD_PATIENT.LABEL.PATIENTID',\n    subgroup = 'ADD_PATIENT.LABEL.SUBGROUP',\n}\n","export enum FormValidationStrings {\n    first = 'ADD_PATIENT.VALIDATION.FIRST',\n    last = 'ADD_PATIENT.VALIDATION.LAST',\n    dob = 'ADD_PATIENT.VALIDATION.DOB',\n    phone = 'ADD_PATIENT.VALIDATION.PHONE',\n    pid = 'ADD_PATIENT.VALIDATION.PATIENTID',\n    subgroup = 'ADD_PATIENT.VALIDATION.SUBGROUP'\n}\n","import {CustomFieldInterface} from './custom-field.interface';\n\nexport class NewPatient {\n    dob: string = '';\n    gender?: string;\n    name: {first: string; middle?: string; last: string;} = {\n        first: '',\n        last: ''\n    };\n    phone?: string;\n    pid: string = '';\n    subgroup?: string;\n    PATIENTINFO_CUSTOMATTRIBUTES?: CustomFieldInterface[];\n}\n","import {Directive, ElementRef} from '@angular/core';\n\n@Directive({\n    selector: '[addShadowPartsToSelectBox]'\n})\n// ////////////////////////////////////////////////////////\n// WHAT: Add shadow parts, \"selectBoxPlaceholder\" and \"selectBoxIcon\"\n// to the <ion-select> component.\n// WHY: the <ion-select> box has an icon and placeholder\n// text that exists in it's shadow dom (or shadow root).\n// Normal (or traditional) CSS can't get to these elements.\n// In order to reach in and style these elements, we need to add\n// a \"part\" attribute to the html which allows us to\n// reach and style these elements using the following,\n// which was designed for styling elements in the shadow dom:\n// ::part(<shadow-part>) { your: css }\n// c_form.scss is where the css exists for the shadow parts\n// that this directive adds.\n// HOWEVER:  the \"::part()\" pseudo element is not supported\n// in all browsers (specifically ios < 13.5) thus also\n// using inline styles for older browsers until browser support improves.\n// ////////////////////////////////////////////////////////\nexport class AddShadowPartsToSelectBox {\n  private observer: MutationObserver;\n\n  constructor(private el: ElementRef) {\n      const node = this.el.nativeElement;\n\n      this.observer = new MutationObserver((mutations) => {\n      // Mutations arrived, try to remove arrow\n          this.removeArrowAndSetOpacity();\n      });\n\n      this.observer.observe(node, {\n          childList: true,\n      });\n  }\n\n  private removeArrowAndSetOpacity() {\n      // Check if the arrow element is already here\n      let selectIcon = this.el.nativeElement.shadowRoot.querySelector('.select-icon');\n      if (selectIcon === null) {\n      // Not yet, ignore this mutation\n          return;\n      }\n      // This mutation has added the arrow. Remove it.\n      selectIcon.setAttribute('part', 'selectBoxIcon');\n      selectIcon.setAttribute('style', 'display: none');\n      // Also set the placeholder text to the same color as other placeholders\n      // If a default value was selected, no placeholder element will be present, so check for null on this one again\n      let selectPlaceholder = this.el.nativeElement.shadowRoot.querySelector('.select-placeholder');\n      if (selectPlaceholder !== null) {\n          selectPlaceholder.setAttribute('part', 'selectBoxPlaceholder');\n          selectPlaceholder.setAttribute('style', 'opacity: 1');\n      }\n      // Stop listening for mutations\n      this.observer.disconnect();\n  }\n}\n"],"sourceRoot":""}